apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId "com.sim.traveltool"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 2
        versionName "2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file("HelloSim.jks")
            keyAlias "HelloSim"
            keyPassword "yclyml0719"
            storePassword "yclyml0719"
        }
        debug {
            storeFile file("HelloSim.jks")
            keyAlias "HelloSim"
            keyPassword "yclyml0719"
            storePassword "yclyml0719"
        }
    }
    //指定apk名称
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "出行工具${defaultConfig.versionName}.apk"
        }
    }
    //封装构建类型配置
    buildTypes {
        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
            minifyEnabled false //是否可以移出无用的java代码，默认为false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //指定插件使用的混淆文件
        }
        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            minifyEnabled false //是否可以移出无用的java代码，默认为false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //指定插件使用的混淆文件
            signingConfig signingConfigs.release //签名配置文件
        }
    }
    //设置JDK1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    // 如果提示多个重复文件，加这属性
//    packagingOptions {
//        exclude 'META-INF/proguard/androidx-annotations.pro'
//    }
//    // 用于指定所有aar引用同样版本的support包
//    configurations.all {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            def requested = details.requested
//            if (requested.group == 'com.android.support') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion '28.0.0'
//                }
//            }
//        }
//    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //noinspection GradleCompatible
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation project(":baselibrary")
    implementation project(":sqlitelibrary")

    api 'com.jakewharton:butterknife:10.0.0'//butterknife
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    implementation('com.github.hotchemi:permissionsdispatcher:3.1.0')
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:3.1.0'

    //一个第三方的图片选择库
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation('com.github.hotchemi:permissionsdispatcher:3.1.0')
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:3.1.0'
}
